	{
		// Place your snippets for haskell here. Each snippet is defined under a snippet name and has a prefix, body and 
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
		// same ids are connected.
		// Example:
		// "Print to console": {
		// 	"prefix": "log",
		// 	"body": [
		// 		"console.log('$1');",
		// 		"$2"
		// 	],
		// 	"description": "Log output to console"
		// }

		"main": {
			"prefix": "main",
			"body": [
				"module Main (main) where",
				"",
				"",
				"main :: IO ()",
				"main = ${0:return ()}",
				""
			],
			"description": "Main function snippet."
		},
		"module": {
			"prefix": "module",
			"body": [
				"module ${module:MyModule} (",
				"\t${export:myFunction}",
				"\t) where"
			],
			"description": "Module declaration snippet."
		},
		"Lambda (trigger does not work)": {
			"prefix": "lambda",
			"body": "\\${inputs} -> ${body}",
			"description": "Lambda expression snippet."
		},
		"case": {
			"prefix": "case",
			"body": [
				"case ${var} of",
				"\t${alt:Just a} -> ${body}",
				"\t${otehrwise:_} -> ${remaining}"
			],
			"description": "Case expression snippet."
		},
		"class": {
			"prefix": "class",
			"body": [
				"class ${name:MyClass} where",
				"\t${fname:myFunction} :: ${type:String}"
			],
			"description": "Type class definition snippet."
		},
		"instance": {
			"prefix": "instance",
			"body": [
				"instance ${class:Show} ${type:String} where",
				"\t${function:function} = ${impl:id}"
			],
			"description": "Instance a typeclas snippet."
		},
		"for": {
			"prefix": "for",
			"body": [
				"for ${coll} $ \\\\${element:element} ->",
				"\t${element:element}"
			],
			"description": "For function snippet."
		},
		"for_": {
			"prefix": "for_",
			"body": [
				"for_ ${coll} $ \\\\${element:element} ->",
				"\t${element:element}"
			],
			"description": "For_ function snippet."
		},
		"map": {
			"prefix": "map",
			"body": [
				"map (\\\\${element} -> ${element}) ${collection}"
			],
			"description": "Map function snippet."
		},
		"fold": {
			"prefix": "fold",
			"body": [
				"fold (\\\\${x} ${element} -> ${x} + ${element}) ${acc} ${collection}"
			],
			"description": "Fold function snippet."
		},
		"foldl": {
			"prefix": "foldl",
			"body": [
				"foldl (\\\\${x} ${element} -> ${x} + ${element}) ${acc} ${collection}"
			],
			"description": "Foldl function snippet."
		},
		"foldr": {
			"prefix": "foldr",
			"body": [
				"foldr (\\\\${element} ${x} -> ${x} + ${element}) ${acc} ${collection}"
			],
			"description": "Foldr function snippet."
		},
		"do": {
			"prefix": "do",
			"body": [
				"do",
				"\t${body:return value}"
			],
			"description": "Do notation snippet."
		},
		"type": {
			"prefix": "type",
			"body": [
				"type ${t1:MyType} = ${t2:Original}"
			],
			"description": "Type alias snippet."
		},
		"data": {
			"prefix": "data",
			"body": [
				"data ${name:MyType} = ${alt1:Record {}} | ${alt2:Algebraic}"
			],
			"description": "Data type declaration snippet."
		},
		"newtype": {
			"prefix": "newtype",
			"body": [
				"newtype ${name:MyType} = ${name:MyType} { un${name:MyType} :: ${original:String} }"
			],
			"description": "Newtype declaration snippet."
		},
		"if": {
			"prefix": "if",
			"body": [
				"if ${cond}",
				"\tthen ${branch1}",
				"\telse ${branch2}"
			],
			"description": "If expression snippet."
		},
		"Pragma": {
			"prefix": "prag",
			"body": [
				"{-# $1 #-}"
			],
			"description": "Pragma declaration snippet."
		},
		"Language Pragma": {
			"prefix": "language",
			"body": [
				"{-# LANGUAGE $1 #-}"
			],
			"description": "Language extension snippet."
		},
		"let": {
			"prefix": "let",
			"body": [
				"let",
				"\t${name} = ${value}",
				"in",
				"\t${expr}"
			],
			"description": "Let binding snippet."
		},
		"where": {
			"prefix": "where",
			"body": [
				"where ${name} = ${value}"
			],
			"description": "Where binding snippet."
		},
		"Function": {
			"prefix": "fun",
			"body": [
				"${name} :: ${type1:Int} -> ${type2:Int}",
				"${name} ${val} = ${expr1}",
				"${name} ${val2:_} = ${expr2}"
			],
			"description": "Function declaration snippet."
		}
	}